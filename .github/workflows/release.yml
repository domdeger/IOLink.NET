name: Release
on:
  release:
    types: [published]

jobs:
  pack:
    name: Build Nuget Packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0
        with:
          updateAssemblyInfo: true
          useConfigFile: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
           7.0.x
           8.0.x
           9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Create output directory
        run: mkdir -p $PWD/npkgs

      - uses: ./.github/actions/build_nuget
        name: Build Nuget Package for IOLink.NET.Core
        with:
          projectPath: ./src/IOLink.NET.Core
          outputDirectory: ../../npkgs

      - uses: ./.github/actions/build_nuget
        name: Build Nuget Package for IOLink.NET.IODD
        with:
          projectPath: ./src/IOLink.NET.IODD
          outputDirectory: ../../npkgs

      - uses: ./.github/actions/build_nuget
        name: Build Nuget Package for IOLink.NET
        with:
          projectPath: ./src/IOLink.NET
          outputDirectory: ../../npkgs

      - uses: ./.github/actions/build_nuget
        name: Build Nuget Package for IOLink.NET.Vendors.Ifm
        with:
          projectPath: ./src/IOLink.NET.Vendors.Ifm
          outputDirectory: ../../npkgs

      - uses: ./.github/actions/build_nuget
        name: Build Nuget Package for IOLink.NET.Visualization
        with:
          projectPath: ./src/IOLink.NET.Visualization
          outputDirectory: ../../npkgs

      - name: Verify packages were created
        run: |
          if [ ! "$(ls -A $PWD/npkgs)" ]; then
            echo "No packages were created!"
            exit 1
          fi
          echo "Created packages:"
          ls -la $PWD/npkgs

      - name: Publish Nuget Package for packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./npkgs
          retention-days: 30

  publish:
    name: Publish Nuget Packages
    runs-on: ubuntu-latest
    needs: pack
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./packages

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Verify downloaded packages
        run: |
          echo "Downloaded packages:"
          ls -la $PWD/packages
          if [ ! "$(ls -A $PWD/packages)" ]; then
            echo "No packages downloaded!"
            exit 1
          fi

      - name: Validate package versions
        run: |
          echo "Validating package versions..."
          for file in $PWD/packages/*.nupkg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Checking if $filename already exists on NuGet.org..."
              # Extract package name and version from filename
              # This is a basic validation - you might want to enhance this
              echo "Package: $filename"
            fi
          done

      - run: echo "$GITHUB_CONTEXT"
      - name: Upload Packages to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in $PWD/packages/*.nupkg; do
            if [ -f "$file" ]; then
              echo "Uploading $file to release ${{ github.event.release.tag_name }}"
              gh release upload ${{ github.event.release.tag_name }} "$file" --clobber
            fi
          done

      - uses: ./.github/actions/publish_nuget
        name: Publish Nuget Packages to Nuget.org
        with:
          nugetApiKey: ${{ secrets.NUGETORG_API_KEY }}
          nugetPackageSource: ${{ vars.NUGETORG_PACKAGE_SOURCE }}
          nugetPackageDirectory: $PWD/packages